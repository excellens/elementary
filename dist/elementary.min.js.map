{"version":3,"file":"elementary.min.js","sources":["../src/Elementary/Base.js","../src/Elementary/Collection.js","../src/Elementary/Observe.js","../src/Elementary/Element.js","../src/Elementary/Component.js","../src/Main.js"],"sourcesContent":["/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * Visit each property of an object.\r\n *\r\n * @param {Object}      object\r\n * @param {function}    callback\r\n * @param {boolean}     hierarchy\r\n */\r\nexport function Visit(object, callback, hierarchy) {\r\n    for (const property in object) {\r\n        if (!hierarchy && !object.hasOwnProperty(property)) {\r\n            continue;\r\n        }\r\n        callback(property, object[property]);\r\n    }\r\n}\r\n\r\n/**\r\n * Merge self-context into an object and bind any function to the object.\r\n *\r\n * @param {Object}      self\r\n * @param {Object}      object\r\n */\r\nexport function Merge(self, object) {\r\n    Visit(self, function (property, propertyValue) {\r\n        if (typeof propertyValue === 'function') {\r\n            object[property] = propertyValue.bind(object);\r\n        } else {\r\n            object[property] = propertyValue;\r\n        }\r\n    }, true);\r\n    return object;\r\n}\r\n","/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport {Merge} from \"./Base\";\r\n\r\nexport function Collection(list) {\r\n    const self = {};\r\n\r\n    this.list = !!list\r\n        ? list\r\n        : [];\r\n\r\n    this.add = function (index, value) {\r\n        // Special case, where no index is given, but only the value.\r\n        if ('undefined' === typeof value) {\r\n            value = index;\r\n            index = this.list.length;\r\n        }\r\n\r\n        return this.set(index, value);\r\n    };\r\n\r\n    this.remove = function (index, value) {\r\n        // Special case, where no index is given, but only the value.\r\n        if ('undefined' === typeof value) {\r\n            value = index;\r\n            index = this.list.indexOf(value, 0);\r\n        }\r\n\r\n        // Discard the value.\r\n        this.list.splice(index, 1);\r\n\r\n        return this;\r\n    };\r\n\r\n    this.get = function (index) {\r\n        return this.has(index)\r\n            ? this.list[index]\r\n            : null;\r\n    };\r\n\r\n    this.set = function (index, value) {\r\n        this.list[index] = value;\r\n\r\n        return this;\r\n    };\r\n\r\n    this.has = function (index) {\r\n        return 'undefined' !== typeof this.list[index];\r\n    };\r\n\r\n    this.each = function (callback) {\r\n        for (let i = 0, j = this.list.length; i < j; i++) {\r\n            callback(this.list[i], i);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    this.push = function (value) {\r\n        this.list[this.list.length] = value;\r\n\r\n        return this;\r\n    };\r\n\r\n    this.pop = function () {\r\n        const index = this.list.length - 1;\r\n        if (0 > index) {\r\n            return null;\r\n        }\r\n\r\n        const value = this.list[index];\r\n\r\n        this.list.length = index;\r\n\r\n        return value;\r\n    };\r\n\r\n    this.size = function () {\r\n        return this.list.length;\r\n    };\r\n\r\n    this.clear = function () {\r\n        this.list.length = 0;\r\n\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n\r\nexport function CollectionMap(list) {\r\n    const self = {};\r\n\r\n    this.list = !!list\r\n        ? list\r\n        : {};\r\n\r\n    this.add = function (key, value) {\r\n        return this.set(key, value);\r\n    };\r\n\r\n    this.remove = function (key) {\r\n        if (this.list.hasOwnProperty(key)) {\r\n            delete this.list[key];\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    this.get = function (key) {\r\n        return this.has(key)\r\n            ? this.list[key]\r\n            : null;\r\n    };\r\n\r\n    this.set = function (key, value) {\r\n        this.list[key] = value;\r\n\r\n        return this;\r\n    };\r\n\r\n    this.has = function (key, strict) {\r\n        // Special case, where strict is not set, but it should be true.\r\n        if ('undefined' === typeof strict) {\r\n            strict = true;\r\n        }\r\n\r\n        return strict\r\n            ? this.list.hasOwnProperty(key)\r\n            : key in this.list;\r\n    };\r\n\r\n    this.each = function (callback) {\r\n        for (let k in this.list) {\r\n            if (!this.list.hasOwnProperty(k)) {\r\n                continue;\r\n            }\r\n\r\n            callback(this.list[k], k);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    this.clear = function () {\r\n        for (let k in this.list) {\r\n            if (!this.list.hasOwnProperty(k)) {\r\n                continue;\r\n            }\r\n\r\n            delete this.list[k];\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n","/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport {Merge} from \"./Base\";\r\nimport {Collection} from \"./Collection\";\r\n\r\nexport function Callback(id, callback) {\r\n    const self = {};\r\n\r\n    this.id = !!id\r\n        ? id\r\n        : null;\r\n    this.callback = callback;\r\n\r\n    this.getId = function () {\r\n        return this.id;\r\n    };\r\n\r\n    this.setId = function (id) {\r\n        this.id = id;\r\n        return this;\r\n    };\r\n\r\n    this.hasId = function () {\r\n        return null !== this.id;\r\n    };\r\n\r\n    this.update = function (subject) {\r\n        this.callback(subject, this.id);\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n\r\nexport function Subject() {\r\n    const self = {};\r\n\r\n    this.callbackCollection = new Collection();\r\n\r\n    this.attachCallback = function (callback) {\r\n        this.callbackCollection.add(callback);\r\n        return this;\r\n    };\r\n\r\n    this.detachCallback = function (callback) {\r\n        this.callbackCollection.remove(callback);\r\n        return this;\r\n    };\r\n\r\n    this.notify = function () {\r\n        const subject = this;\r\n\r\n        this.callbackCollection.each(function (value, index) {\r\n            value.update(subject);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n","/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport {Merge} from \"./Base\";\r\n\r\n/**\r\n * Assert the element tag-name is equal to the element-name.\r\n *\r\n * @param {Object}  element\r\n * @param {string}  elementName\r\n * @returns {boolean}\r\n */\r\nfunction assertType(element, elementName) {\r\n    if (element.tagName.toUpperCase() === elementName.toUpperCase()) {\r\n        return true;\r\n    }\r\n\r\n    throw 'ERR_ELEMENT_NAME';\r\n}\r\n\r\nexport function Element(document, elementName, element) {\r\n    const self = (function (document, elementName, element) {\r\n        element = !!element\r\n            ? element\r\n            : document.createElement(elementName);\r\n\r\n        assertType(element, elementName);\r\n\r\n        return element;\r\n    }(document, elementName, element));\r\n\r\n    return Merge(this, self);\r\n}\r\n","/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nimport {Merge} from \"./Base\";\r\nimport {Element} from \"./Element\";\r\nimport {Callback, Subject} from \"./Observe\";\r\n\r\nexport function Component(presenter, document, elementName, element) {\r\n    const self = new Element(document, elementName, element);\r\n\r\n    this.presenter = presenter;\r\n\r\n    this.initialize = function () {\r\n        this.presenter.initialize(this);\r\n\r\n        return this;\r\n    };\r\n\r\n    this.destroy = function () {\r\n        this.presenter.destroy();\r\n\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n\r\nexport function ComponentPresenter(state) {\r\n    const self = {};\r\n\r\n    this.state = state;\r\n\r\n    this.update = function (state, id) {\r\n        throw 'ERR_COMPONENT_UPDATE';\r\n    };\r\n\r\n    let callback = null;\r\n\r\n    this.component = null;\r\n\r\n    this.initialize = function (component) {\r\n        this.component = component;\r\n\r\n        callback = new Callback('ComponentPresenter', this.update);\r\n        this.state.attachCallback(callback);\r\n        this.state.notify();\r\n\r\n        return this;\r\n    };\r\n\r\n    this.destroy = function () {\r\n        this.component = null;\r\n\r\n        this.state.detachCallback(callback);\r\n        callback = null;\r\n\r\n        return this;\r\n    };\r\n\r\n    return Merge(this, self);\r\n}\r\n\r\nexport function ComponentState() {\r\n    const self = new Subject();\r\n\r\n    return Merge(this, self);\r\n}\r\n","/*\r\n * MIT License\r\n * Copyright (c) 2020 Excellens\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nexport * as Base from \"./Elementary/Base\";\r\nexport * as Collection from \"./Elementary/Collection\"\r\nexport * as Observe from \"./Elementary/Observe\"\r\nexport * as Element from \"./Elementary/Element\"\r\nexport * as Component from \"./Elementary/Component\"\r\n\r\nimport {version} from '../package.json';\r\n\r\nexport const metadata = {\r\n    version: version,\r\n};\r\n"],"names":["Visit","object","callback","hierarchy","property","hasOwnProperty","Merge","self","propertyValue","bind","Collection","list","this","add","index","value","length","set","remove","indexOf","splice","get","has","each","i","j","push","pop","size","clear","key","strict","k","Callback","id","getId","setId","hasId","update","subject","Subject","callbackCollection","attachCallback","detachCallback","notify","Element","document","elementName","element","tagName","toUpperCase","assertType","createElement","presenter","initialize","destroy","state","component","metadata","version"],"mappings":"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"}